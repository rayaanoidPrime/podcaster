// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Podcast {
    id                String      @id @default(cuid())
    title             String
    description       String
    episodes          Episode[] 
    createdAt         DateTime    @default(now())@unique
    updatedAt         DateTime    @updatedAt
    favouritedBy      User        @relation( fields: [userId] , references: [id])
    userId            String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
    favourites    Podcast[]
    Uploaded      Episode[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Episode {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  podcast      Podcast  @relation(fields: [podcastId] , references: [id])
  podcastId    String
  mediaType    MediaType
  mediaUrl     String
  duration     Int
  fileSize     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

enum MediaType {
  AUDIO
  VIDEO
}

enum UserRole {
  ADMIN
  USER
}